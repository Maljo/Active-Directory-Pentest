import ctypes

# The path to the DLL we want to inject
dll_path = "C:\\path\\to\\dll\\dll.dll"

# The ID of the process we want to inject the DLL into
process_id = 1234

# Open the target process with PROCESS_ALL_ACCESS permission
process_handle = ctypes.windll.kernel32.OpenProcess(
    ctypes.c_uint32(0x1F0FFF),  # PROCESS_ALL_ACCESS
    ctypes.c_int(False),
    ctypes.c_uint32(process_id)
)

# Allocate memory for the path to the DLL within the target process
dll_path_address = ctypes.windll.kernel32.VirtualAllocEx(
    process_handle,
    None,
    len(dll_path),
    ctypes.c_uint32(0x1000),
    ctypes.c_uint32(0x40)
)

# Write the path to the DLL into the allocated memory within the target process
ctypes.windll.kernel32.WriteProcessMemory(
    process_handle,
    dll_path_address,
    dll_path.encode("utf-8"),
    len(dll_path),
    None
)

# Get the address of the LoadLibrary function within kernel32.dll
load_library_address = ctypes.windll.kernel32.GetProcAddress(
    ctypes.windll.kernel32.GetModuleHandleA(b"kernel32.dll"),
    b"LoadLibraryA"
)

# Create a remote thread within the target process that calls LoadLibrary with the path to the DLL as its argument
ctypes.windll.kernel32.CreateRemoteThread(
    process_handle,
    None,
    0,
    load_library_address,
    dll_path_address,
    0,
    None
)

# Close the handle to the target process
ctypes.windll.kernel32.CloseHandle(process_handle)
