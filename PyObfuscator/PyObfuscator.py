import ast
import random
import string

# Define a function to generate a random string of letters and digits
def random_string(length):
    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))

# Define a function to obfuscate variable names in a Python AST
def obfuscate_variables(node):
    if isinstance(node, ast.Name):
        # Generate a random string of letters and digits to replace the variable name
        new_name = random_string(10)
        # Replace the variable name with the random string
        node.id = new_name
    elif hasattr(node, 'body'):
        # Recursively obfuscate variable names in child nodes
        for child in node.body:
            obfuscate_variables(child)

# Define a function to obfuscate function names in a Python AST
def obfuscate_functions(node):
    if isinstance(node, ast.FunctionDef):
        # Generate a random string of letters and digits to replace the function name
        new_name = random_string(10)
        # Replace the function name with the random string
        node.name = new_name
    elif hasattr(node, 'body'):
        # Recursively obfuscate function names in child nodes
        for child in node.body:
            obfuscate_functions(child)

# Read the input script file
with open('input_script.py', 'r') as f:
    input_script = f.read()

# Parse the input script as an AST
ast_tree = ast.parse(input_script)

# Obfuscate variable and function names in the AST
obfuscate_variables(ast_tree)
obfuscate_functions(ast_tree)

# Compile the obfuscated AST back into Python code
obfuscated_code = compile(ast_tree, filename='obfuscated_script.py', mode='exec')

# Write the obfuscated code to a new file
with open('obfuscated_script.py', 'w') as f:
    f.write(obfuscated_code)
